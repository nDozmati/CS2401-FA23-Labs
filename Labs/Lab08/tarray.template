template<class T>
Tarray<T>::Tarray(){
    capacity = 5;
    used = 0;
    data = new T[capacity];
}

template<class T>
void Tarray<T>::add(T item){
    if(used == capacity){
        resize();
    }
    
    data[used] = item;
    used++;
}

template<class T>
void Tarray<T>::start(){
    current_index = 0;
}

template<class T>
bool Tarray<T>::is_item()const{
    if(current_index < used){
        return true;
    } else {
        return false;
    }
}

template<class T>
void Tarray<T>::advance(){
    current_index++;
}

template<class T>
T Tarray<T>::current()const{
    return data[current_index];
}

template<class T>
void Tarray<T>::remove_current(){
    for(size_t i = current_index; i < used + 1; i++){
        data[i] = data[i + 1];
    }
    //data[used] = data[current_index]; // we don't want to swap
    used--;
}

template<class T>
void Tarray<T>::resize(){
    T *tmp = new T[capacity + 5];

    for(size_t i = 0; i < used; i++){
        tmp[i] = data[i];
    }

    delete[] data;
    data = tmp;
    capacity+=5;
}